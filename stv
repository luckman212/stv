#!/bin/sh
ver=1.2.0

_cacheupdate() {
    if [ "$1" == "--force" ]; then
        echo "updating rule cache..." >&2
        /bin/rm /tmp/stv_rulecache
    fi
    last_ts=$(/usr/bin/stat -f%c /tmp/stv_rulecache 2>/dev/null || echo 0)
    now=$(/bin/date +%s)
    elapsed=$(( now - last_ts ))
    if [ $elapsed -gt 300 ] || [ ! -e /tmp/stv_rulecache ]; then
        /sbin/pfctl -vvsr | /usr/local/bin/perl -ne "print if s|^\@([0-9]+).*? label \"(USER_RULE: )?(.*?)\".*$|\1\t\3|p" >/tmp/stv_rulecache
    fi
}

case $1 in
  --help|-h)
    echo "usage: $(/usr/bin/basename $0) [options] [filter_regex]"
    echo
    echo "	-h, --help        display this help"
    echo "	-v, --version     print version"
    echo "	-c, --cache       force update of rule cache (also auto-updates every 5m)"
    echo "	-r, --rule <qry>  search rules based on <qry> (regex)"
    echo
    echo "	for more info, visit: https://github.com/luckman212/stv"
    exit
    ;;
  --version|-v)
    echo "v${ver}"
    latest=$(/usr/bin/fetch -T5 -qo- 'https://raw.githubusercontent.com/luckman212/stv/main/version' 2>/dev/null)
    if [ -n "$latest" ] && [ "$ver" != "$latest" ]; then
        echo "new version available: v${latest}"
    fi
    exit
    ;;
  --cache|-c)
    _cacheupdate --force
    exit
    ;;
  --rule|-r)
    if [ "$2" != "" ]; then
        _cacheupdate
        /usr/bin/grep -E "$2" /tmp/stv_rulecache
        exit
    else
        echo "you must specify a search pattern after --rule"
        exit 1
    fi
    ;;
esac

_cacheupdate

/sbin/pfctl -vvss >/tmp/stv_statecache

/usr/bin/awk -v m="$1" '
    BEGIN {
        printf("%-14s %-8s %-20s %-26s %-24s %s\n",
        "proto/dir", "iface", "rule", "state/creator", "state", "talkers");
        cnt=0;
    }
    fname != FILENAME {
        fname = FILENAME; idx++
    }
    idx == 1 {
        split($0,a,"\t");
        rid = a[1];
        desc = a[2];
        rules[rid] = desc;
        #printf("added rule %s: %s\n", rid, desc);
        next;
    }
    idx == 2 && !/^ / {
        #print "recno: "NR " <== entrypoint";
        rid=""; rdesc=""; rdisp=""; sid=""; gw=""; iface=""; talkers="";
        proto=$2; st=$NF;
        i=3; while (i<NF) {
            talkers=sprintf("%s%s ", talkers, $i);
            if($i=="->") { dir="out"; }
            if($i=="<-") { dir="in"; }
            i++;
        }
        proto_dir=sprintf("%s/%s", proto, dir);
        next;
    }
    idx == 2 {
        #print "recno: "NR " -- processing "$0;
        if($0 ~ /\+/) {
            #print "recno: "NR " wscale";
            next;
        }
        if($1=="age") {
            #print "recno: "NR " rule";
            if($(NF-1)=="rule") {
                rid=$NF;
                rdesc=rules[$NF];
                rdisp=sprintf("%s:%s", rid, substr(rdesc, 1, 14));
            } else {
                rdisp="none";
            }
            next;
        }
        if($1=="id:") {
            #print "recno: "NR " id";
            sid=sprintf("%s/%s", $2, $4);
            gw=(($6=="0.0.0.0"||$6=="::") ? "" : sprintf("(via %s)",$6));
            next;
        }
        if($1=="origif:") {
            #print "recno: "NR " origif";
            iface=$2;
        }
    }
    idx == 2 {
        #print "recno: "NR " output";
        mm=sprintf("%%%s%%%s%%%s%%%s%%%s%%%s%%%s%%", proto_dir, iface, rid, rdesc, sid, st, talkers, gw);
        if(mm ~ m) {
            printf "%-14s %-8s %-20s %-26s %-24s %s%s\n",
            proto_dir, iface, rdisp, sid, st, talkers, gw;
            cnt++;
        }
    }
    END {
        printf("%d state%s\n", cnt, (cnt==1 ? "" : "s"));
    }
    ' /tmp/stv_rulecache /tmp/stv_statecache
